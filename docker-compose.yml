version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - DATABASE_URL=${DATABASE_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${NEXT_PUBLIC_STRIPE_PUBLIC_KEY}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - /app/node_modules
      - ./storage:/app/storage
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - ./backend:/app/backend  # Mount the local code into the container
      - ./storage:/app/storage
    depends_on:
      - postgres
  stripe-cli:
    image: stripe/stripe-cli
    container_name: stripe-cli
    command: "listen --forward-to http://localhost:3000/api/webhook --api-key ${STRIPE_API_KEY}"
    environment:
      - STRIPE_API_KEY=${STRIPE_API_KEY}
    network_mode: "host"
    depends_on:
      - frontend
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=${TZ}
      - PGTZ=${PGTZ}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data: