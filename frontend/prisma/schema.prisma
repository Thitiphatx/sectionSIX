generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Users {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  role        UserRole      @default(USER)
  created_at  DateTime      @default(now()) @db.Date
  status      UserStatus    @default(ACTIVE)
  Transaction Transaction[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Resources {
  id         String         @id @default(uuid())
  name       String
  created_at DateTime       @default(now()) @db.Date
  Images     Images[]
  status     ResourceStatus @default(READY)
}

model Images {
  id          String           @id @default(uuid())
  resource_id String?
  resource    Resources?       @relation(fields: [resource_id], references: [id])
  version_id  String?
  version     ClusterVersions? @relation(fields: [version_id], references: [id])
  latitude    Float
  longitude   Float
  timestamp   DateTime
  file_name   String
  classes     Json?
  status      ImageStatus      @default(PENDING)

  @@unique([resource_id, file_name]) // Composite unique constraint
}

model Clusters {
  id              String            @id @default(uuid())
  name            String
  address         String
  road            String
  created_at      DateTime          @default(now()) @db.Date
  ClusterVersions ClusterVersions[]
}

model ClusterVersions {
  id              String               @id @default(uuid())
  price           Float
  version         Int
  created_at      DateTime             @default(now()) @db.Date
  status          ClusterVersionStatus @default(UNPROCESS)
  cluster_id      String
  cluster         Clusters             @relation(fields: [cluster_id], references: [id], onDelete: Cascade)
  Images          Images[]
  classes         Json?
  Transaction     Transaction[]
}

model Transaction {
  id            String            @id @default(uuid())
  user_id       String
  user          Users             @relation(fields: [user_id], references: [id])
  version_id    String
  version       ClusterVersions   @relation(fields: [version_id], references: [id])
  purchase_date DateTime          @default(now())
  price         Float
  status        TransactionStatus
}

enum UserStatus {
  ACTIVE // Normal
  DEACTIVE // Banned
}

enum UserRole {
  ADMIN
  USER
}

enum ImageStatus {
  PENDING // No file yet
  AVAILABLE // File is available
}

enum ResourceStatus {
  DONE // Clustered resource
  READY // All images has uploaded
}

enum ClusterVersionStatus {
  ACTIVE // listed on selling
  DEACTIVE // unlisted
  UNPROCESS // image not process segmentation yet
}

enum TransactionStatus {
  SUCCESS
  FAILED
}
